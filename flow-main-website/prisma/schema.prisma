// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum OrderpaymentStatus {
    PENDING
    COMPLETED
    FAILED
    REFUNDED
}

// Example model - you can modify this based on your needs
model User {
    id                      String    @id @default(cuid())
    email                   String    @unique
    password                String?
    name                    String?
    phone                   String?   @unique
    age                     Int?
    address                 String?
    isAdmin                 Boolean   @default(false)
    buyingAsGuest           Boolean   @default(false)
    favourites              String[]  @default([]) // Array of product IDs
    zohoAccessToken         String?
    zohoRefreshToken        String?
    zohoTokenExpiry         DateTime?
    zohoRefreshTokenCounter Int       @default(0)
    createdAt               DateTime  @default(now())
    updatedAt               DateTime  @updatedAt

    orders Orders[]

    @@map("users")
}

model Products {
    id          String   @id @default(cuid())
    name        String
    description String?
    price       Float
    stock       Int
    imageUrl    String?
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
    tags        String[] @default([])
    searchTags  String[] @default([])

    orderItems OrderItems[]

    @@map("products")
}

model Orders {
    id              String             @id @default(cuid())
    payment_link_id String?
    userId          String
    total           Float
    status          OrderpaymentStatus @default(PENDING)
    orderUsername   String?
    orderEmail      String?
    orderPhone      String?
    orderAddress    String?
    orderItems      OrderItems[] // ✅ One-to-many relation
    orderedAt       DateTime           @default(now())
    updatedAt       DateTime           @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("orders")
}

model OrderItems {
    id        String @id @default(cuid())
    orderId   String
    productId String
    quantity  Int

    // ✅ Add the relation field
    order   Orders   @relation(fields: [orderId], references: [id], onDelete: Cascade)
    product Products @relation(fields: [productId], references: [id], onDelete: Cascade)

    @@map("order_items")
}

model Logs {
    id        String   @id @default(cuid())
    action    String
    log       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@map("logs")
}
